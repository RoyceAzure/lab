// Code generated by MockGen. DO NOT EDIT.
// Source: .\pkg\kafka\consumer\processer.go

// Package mock_consumer is a generated GoMock package.
package mock_consumer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/segmentio/kafka-go"
)

// MockProcesser is a mock of Processer interface.
type MockProcesser struct {
	ctrl     *gomock.Controller
	recorder *MockProcesserMockRecorder
}

// MockProcesserMockRecorder is the mock recorder for MockProcesser.
type MockProcesserMockRecorder struct {
	mock *MockProcesser
}

// NewMockProcesser creates a new mock instance.
func NewMockProcesser(ctrl *gomock.Controller) *MockProcesser {
	mock := &MockProcesser{ctrl: ctrl}
	mock.recorder = &MockProcesserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcesser) EXPECT() *MockProcesserMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockProcesser) Process(ctx context.Context, msgs []kafka.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, msgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockProcesserMockRecorder) Process(ctx, msgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProcesser)(nil).Process), ctx, msgs)
}
