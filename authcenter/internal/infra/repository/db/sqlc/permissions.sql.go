// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: permissions.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (id, name, description, resource, actions)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, resource, actions, description
`

type CreatePermissionParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Resource    string      `json:"resource"`
	Actions     string      `json:"actions"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Resource,
		arg.Actions,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Resource,
		&i.Actions,
		&i.Description,
	)
	return i, err
}

const createPermissionIfNotExists = `-- name: CreatePermissionIfNotExists :exec
INSERT INTO permissions (id, name, description, resource, actions)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (name) DO NOTHING
`

type CreatePermissionIfNotExistsParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Resource    string      `json:"resource"`
	Actions     string      `json:"actions"`
}

func (q *Queries) CreatePermissionIfNotExists(ctx context.Context, arg CreatePermissionIfNotExistsParams) error {
	_, err := q.db.Exec(ctx, createPermissionIfNotExists,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Resource,
		arg.Actions,
	)
	return err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions WHERE id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePermission, id)
	return err
}

const getPermissionByID = `-- name: GetPermissionByID :one
SELECT id, name, resource, actions, description FROM permissions WHERE id = $1
`

func (q *Queries) GetPermissionByID(ctx context.Context, id int32) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermissionByID, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Resource,
		&i.Actions,
		&i.Description,
	)
	return i, err
}

const getPermissionByName = `-- name: GetPermissionByName :one
SELECT id, name, resource, actions, description FROM permissions WHERE name = $1
`

func (q *Queries) GetPermissionByName(ctx context.Context, name string) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermissionByName, name)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Resource,
		&i.Actions,
		&i.Description,
	)
	return i, err
}

const listPermissions = `-- name: ListPermissions :many
SELECT id, name, resource, actions, description FROM permissions ORDER BY id ASC LIMIT $1 OFFSET $2
`

type ListPermissionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPermissions(ctx context.Context, arg ListPermissionsParams) ([]Permission, error) {
	rows, err := q.db.Query(ctx, listPermissions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Resource,
			&i.Actions,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermission = `-- name: UpdatePermission :one
UPDATE permissions
SET name = $2, description = $3, resource = $4, actions=$5
WHERE id = $1
RETURNING id, name, resource, actions, description
`

type UpdatePermissionParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Resource    string      `json:"resource"`
	Actions     string      `json:"actions"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, updatePermission,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Resource,
		arg.Actions,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Resource,
		&i.Actions,
		&i.Description,
	)
	return i, err
}
