// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: email_vertify.sql

package sqlc

import (
	"context"
	"time"
)

const createEmailVertify = `-- name: CreateEmailVertify :one
INSERT INTO email_vertify (id, email, is_valid, created_at, expires_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, email, is_valid, created_at, expires_at
`

type CreateEmailVertifyParams struct {
	ID        string    `json:"id"`
	Email     string    `json:"email"`
	IsValid   bool      `json:"is_valid"`
	CreatedAt time.Time `json:"created_at"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateEmailVertify(ctx context.Context, arg CreateEmailVertifyParams) (EmailVertify, error) {
	row := q.db.QueryRow(ctx, createEmailVertify,
		arg.ID,
		arg.Email,
		arg.IsValid,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i EmailVertify
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IsValid,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deactivateEmailVertifyByID = `-- name: DeactivateEmailVertifyByID :exec
UPDATE email_vertify 
SET is_valid = FALSE 
WHERE id = $1 
AND is_valid = TRUE
`

func (q *Queries) DeactivateEmailVertifyByID(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deactivateEmailVertifyByID, id)
	return err
}

const deleteEmailVertify = `-- name: DeleteEmailVertify :exec
DELETE FROM email_vertify WHERE id = $1
`

func (q *Queries) DeleteEmailVertify(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteEmailVertify, id)
	return err
}

const getEmailVertify = `-- name: GetEmailVertify :one
SELECT id, email, is_valid, created_at, expires_at FROM email_vertify WHERE id = $1
`

func (q *Queries) GetEmailVertify(ctx context.Context, id string) (EmailVertify, error) {
	row := q.db.QueryRow(ctx, getEmailVertify, id)
	var i EmailVertify
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IsValid,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getEmailVertifyByEmail = `-- name: GetEmailVertifyByEmail :many
SELECT id, email, is_valid, created_at, expires_at FROM email_vertify WHERE email = $1
`

func (q *Queries) GetEmailVertifyByEmail(ctx context.Context, email string) ([]EmailVertify, error) {
	rows, err := q.db.Query(ctx, getEmailVertifyByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmailVertify{}
	for rows.Next() {
		var i EmailVertify
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.IsValid,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmailVertify = `-- name: UpdateEmailVertify :one
UPDATE email_vertify SET is_valid = $2 WHERE id = $1 RETURNING id, email, is_valid, created_at, expires_at
`

type UpdateEmailVertifyParams struct {
	ID      string `json:"id"`
	IsValid bool   `json:"is_valid"`
}

func (q *Queries) UpdateEmailVertify(ctx context.Context, arg UpdateEmailVertifyParams) (EmailVertify, error) {
	row := q.db.QueryRow(ctx, updateEmailVertify, arg.ID, arg.IsValid)
	var i EmailVertify
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IsValid,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
