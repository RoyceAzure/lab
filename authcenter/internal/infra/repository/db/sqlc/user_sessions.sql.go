// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_sessions.sql

package sqlc

import (
	"context"
	"net/netip"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO user_sessions (
    id, user_id, access_token, refresh_token, ip_address, 
    device_info, region, user_agent, last_activity_at, expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP, $9
) RETURNING id, user_id, access_token, refresh_token, ip_address, device_info, region, user_agent, is_active, last_activity_at, created_at, expires_at, revoked_at
`

type CreateSessionParams struct {
	ID           pgtype.UUID `json:"id"`
	UserID       pgtype.UUID `json:"user_id"`
	AccessToken  string      `json:"access_token"`
	RefreshToken string      `json:"refresh_token"`
	IpAddress    netip.Addr  `json:"ip_address"`
	DeviceInfo   string      `json:"device_info"`
	Region       pgtype.Text `json:"region"`
	UserAgent    pgtype.Text `json:"user_agent"`
	ExpiresAt    time.Time   `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.IpAddress,
		arg.DeviceInfo,
		arg.Region,
		arg.UserAgent,
		arg.ExpiresAt,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IpAddress,
		&i.DeviceInfo,
		&i.Region,
		&i.UserAgent,
		&i.IsActive,
		&i.LastActivityAt,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM user_sessions 
WHERE expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM user_sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const forceClearAllSessions = `-- name: ForceClearAllSessions :exec
TRUNCATE TABLE user_sessions
`

func (q *Queries) ForceClearAllSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, forceClearAllSessions)
	return err
}

const getSessionByAccessToken = `-- name: GetSessionByAccessToken :one
SELECT id, user_id, access_token, refresh_token, ip_address, device_info, region, user_agent, is_active, last_activity_at, created_at, expires_at, revoked_at FROM user_sessions WHERE access_token = $1 AND is_active = true LIMIT 1
`

func (q *Queries) GetSessionByAccessToken(ctx context.Context, accessToken string) (UserSession, error) {
	row := q.db.QueryRow(ctx, getSessionByAccessToken, accessToken)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IpAddress,
		&i.DeviceInfo,
		&i.Region,
		&i.UserAgent,
		&i.IsActive,
		&i.LastActivityAt,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, access_token, refresh_token, ip_address, device_info, region, user_agent, is_active, last_activity_at, created_at, expires_at, revoked_at FROM user_sessions WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSessionByID(ctx context.Context, id pgtype.UUID) (UserSession, error) {
	row := q.db.QueryRow(ctx, getSessionByID, id)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IpAddress,
		&i.DeviceInfo,
		&i.Region,
		&i.UserAgent,
		&i.IsActive,
		&i.LastActivityAt,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getSessionByRefreshToken = `-- name: GetSessionByRefreshToken :one
SELECT id, user_id, access_token, refresh_token, ip_address, device_info, region, user_agent, is_active, last_activity_at, created_at, expires_at, revoked_at FROM user_sessions WHERE refresh_token = $1 AND is_active = true LIMIT 1
`

func (q *Queries) GetSessionByRefreshToken(ctx context.Context, refreshToken string) (UserSession, error) {
	row := q.db.QueryRow(ctx, getSessionByRefreshToken, refreshToken)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IpAddress,
		&i.DeviceInfo,
		&i.Region,
		&i.UserAgent,
		&i.IsActive,
		&i.LastActivityAt,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getSessionByRequestInfo = `-- name: GetSessionByRequestInfo :one
SELECT id, user_id, access_token, refresh_token, ip_address, device_info, region, user_agent, is_active, last_activity_at, created_at, expires_at, revoked_at FROM user_sessions 
WHERE 
    user_id = $1  
    AND  ip_address = $2
    AND  device_info = $3
    AND
    ($4::text IS NULL OR region = $4::text)
    AND
    ($5::text IS NULL OR user_agent = $5::text)
    AND is_active = true
LIMIT 1
`

type GetSessionByRequestInfoParams struct {
	UserID     pgtype.UUID `json:"user_id"`
	IpAddress  netip.Addr  `json:"ip_address"`
	DeviceInfo string      `json:"device_info"`
	Region     pgtype.Text `json:"region"`
	UserAgent  pgtype.Text `json:"user_agent"`
}

func (q *Queries) GetSessionByRequestInfo(ctx context.Context, arg GetSessionByRequestInfoParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, getSessionByRequestInfo,
		arg.UserID,
		arg.IpAddress,
		arg.DeviceInfo,
		arg.Region,
		arg.UserAgent,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IpAddress,
		&i.DeviceInfo,
		&i.Region,
		&i.UserAgent,
		&i.IsActive,
		&i.LastActivityAt,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const listActiveSessionsByUserID = `-- name: ListActiveSessionsByUserID :many
SELECT id, user_id, access_token, refresh_token, ip_address, device_info, region, user_agent, is_active, last_activity_at, created_at, expires_at, revoked_at FROM user_sessions 
WHERE user_id = $1 AND is_active = true 
ORDER BY created_at DESC
`

func (q *Queries) ListActiveSessionsByUserID(ctx context.Context, userID pgtype.UUID) ([]UserSession, error) {
	rows, err := q.db.Query(ctx, listActiveSessionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserSession{}
	for rows.Next() {
		var i UserSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AccessToken,
			&i.RefreshToken,
			&i.IpAddress,
			&i.DeviceInfo,
			&i.Region,
			&i.UserAgent,
			&i.IsActive,
			&i.LastActivityAt,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.RevokedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAllUserSessions = `-- name: RevokeAllUserSessions :exec
UPDATE user_sessions 
SET is_active = false, revoked_at = CURRENT_TIMESTAMP 
WHERE user_id = $1 AND id != $2
`

type RevokeAllUserSessionsParams struct {
	UserID pgtype.UUID `json:"user_id"`
	ID     pgtype.UUID `json:"id"`
}

func (q *Queries) RevokeAllUserSessions(ctx context.Context, arg RevokeAllUserSessionsParams) error {
	_, err := q.db.Exec(ctx, revokeAllUserSessions, arg.UserID, arg.ID)
	return err
}

const revokeSession = `-- name: RevokeSession :exec
UPDATE user_sessions 
SET is_active = false, revoked_at = CURRENT_TIMESTAMP 
WHERE id = $1
`

func (q *Queries) RevokeSession(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, revokeSession, id)
	return err
}

const updateSessionActivity = `-- name: UpdateSessionActivity :exec
UPDATE user_sessions 
SET last_activity_at = CURRENT_TIMESTAMP 
WHERE id = $1
`

func (q *Queries) UpdateSessionActivity(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateSessionActivity, id)
	return err
}

const updateSessionTokens = `-- name: UpdateSessionTokens :one
UPDATE user_sessions 
SET access_token = $1, refresh_token = $2, last_activity_at = CURRENT_TIMESTAMP 
WHERE id = $3 
RETURNING id, user_id, access_token, refresh_token, ip_address, device_info, region, user_agent, is_active, last_activity_at, created_at, expires_at, revoked_at
`

type UpdateSessionTokensParams struct {
	AccessToken  string      `json:"access_token"`
	RefreshToken string      `json:"refresh_token"`
	ID           pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateSessionTokens(ctx context.Context, arg UpdateSessionTokensParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, updateSessionTokens, arg.AccessToken, arg.RefreshToken, arg.ID)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IpAddress,
		&i.DeviceInfo,
		&i.Region,
		&i.UserAgent,
		&i.IsActive,
		&i.LastActivityAt,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}
