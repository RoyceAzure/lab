// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const activeUser = `-- name: ActiveUser :exec
UPDATE users
SET is_active = TRUE 
WHERE id = $1
`

func (q *Queries) ActiveUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, activeUser, id)
	return err
}

const activeUserAdmin = `-- name: ActiveUserAdmin :exec
UPDATE users
SET is_admin = TRUE 
WHERE id = $1
`

func (q *Queries) ActiveUserAdmin(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, activeUserAdmin, id)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, google_id, facebook_id, email, account, password_hash, name, line_user_id, line_linked_at, created_at,is_admin, is_active)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, google_id, facebook_id, email, account, password_hash, name, is_admin, is_active, line_user_id, line_linked_at, created_at
`

type CreateUserParams struct {
	ID           pgtype.UUID        `json:"id"`
	GoogleID     pgtype.Text        `json:"google_id"`
	FacebookID   pgtype.Text        `json:"facebook_id"`
	Email        string             `json:"email"`
	Account      pgtype.Text        `json:"account"`
	PasswordHash pgtype.Text        `json:"password_hash"`
	Name         pgtype.Text        `json:"name"`
	LineUserID   pgtype.Text        `json:"line_user_id"`
	LineLinkedAt pgtype.Timestamptz `json:"line_linked_at"`
	CreatedAt    time.Time          `json:"created_at"`
	IsAdmin      bool               `json:"is_admin"`
	IsActive     bool               `json:"is_active"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.GoogleID,
		arg.FacebookID,
		arg.Email,
		arg.Account,
		arg.PasswordHash,
		arg.Name,
		arg.LineUserID,
		arg.LineLinkedAt,
		arg.CreatedAt,
		arg.IsAdmin,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.FacebookID,
		&i.Email,
		&i.Account,
		&i.PasswordHash,
		&i.Name,
		&i.IsAdmin,
		&i.IsActive,
		&i.LineUserID,
		&i.LineLinkedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createUserIfNotExists = `-- name: CreateUserIfNotExists :exec
INSERT INTO users (id, google_id, facebook_id, email, account, password_hash, name, line_user_id, line_linked_at, created_at,is_admin, is_active)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
ON CONFLICT (email) DO NOTHING
`

type CreateUserIfNotExistsParams struct {
	ID           pgtype.UUID        `json:"id"`
	GoogleID     pgtype.Text        `json:"google_id"`
	FacebookID   pgtype.Text        `json:"facebook_id"`
	Email        string             `json:"email"`
	Account      pgtype.Text        `json:"account"`
	PasswordHash pgtype.Text        `json:"password_hash"`
	Name         pgtype.Text        `json:"name"`
	LineUserID   pgtype.Text        `json:"line_user_id"`
	LineLinkedAt pgtype.Timestamptz `json:"line_linked_at"`
	CreatedAt    time.Time          `json:"created_at"`
	IsAdmin      bool               `json:"is_admin"`
	IsActive     bool               `json:"is_active"`
}

func (q *Queries) CreateUserIfNotExists(ctx context.Context, arg CreateUserIfNotExistsParams) error {
	_, err := q.db.Exec(ctx, createUserIfNotExists,
		arg.ID,
		arg.GoogleID,
		arg.FacebookID,
		arg.Email,
		arg.Account,
		arg.PasswordHash,
		arg.Name,
		arg.LineUserID,
		arg.LineLinkedAt,
		arg.CreatedAt,
		arg.IsAdmin,
		arg.IsActive,
	)
	return err
}

const deActiveUser = `-- name: DeActiveUser :exec
UPDATE users
SET is_active = FALSE 
WHERE id = $1
`

func (q *Queries) DeActiveUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deActiveUser, id)
	return err
}

const deActiveUserAdmin = `-- name: DeActiveUserAdmin :exec
UPDATE users
SET is_admin = FALSE 
WHERE id = $1
`

func (q *Queries) DeActiveUserAdmin(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deActiveUserAdmin, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByAccount = `-- name: GetUserByAccount :one
SELECT id, google_id, facebook_id, email, account, password_hash, name, is_admin, is_active, line_user_id, line_linked_at, created_at FROM users WHERE account = $1
`

func (q *Queries) GetUserByAccount(ctx context.Context, account pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByAccount, account)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.FacebookID,
		&i.Email,
		&i.Account,
		&i.PasswordHash,
		&i.Name,
		&i.IsAdmin,
		&i.IsActive,
		&i.LineUserID,
		&i.LineLinkedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByAccountAndPassword = `-- name: GetUserByAccountAndPassword :one
SELECT id, google_id, facebook_id, email, account, password_hash, name, is_admin, is_active, line_user_id, line_linked_at, created_at FROM users WHERE account = $1
`

func (q *Queries) GetUserByAccountAndPassword(ctx context.Context, account pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByAccountAndPassword, account)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.FacebookID,
		&i.Email,
		&i.Account,
		&i.PasswordHash,
		&i.Name,
		&i.IsAdmin,
		&i.IsActive,
		&i.LineUserID,
		&i.LineLinkedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, google_id, facebook_id, email, account, password_hash, name, is_admin, is_active, line_user_id, line_linked_at, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.FacebookID,
		&i.Email,
		&i.Account,
		&i.PasswordHash,
		&i.Name,
		&i.IsAdmin,
		&i.IsActive,
		&i.LineUserID,
		&i.LineLinkedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByGoogleID = `-- name: GetUserByGoogleID :one
SELECT id, google_id, facebook_id, email, account, password_hash, name, is_admin, is_active, line_user_id, line_linked_at, created_at FROM users WHERE google_id = $1
`

func (q *Queries) GetUserByGoogleID(ctx context.Context, googleID pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByGoogleID, googleID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.FacebookID,
		&i.Email,
		&i.Account,
		&i.PasswordHash,
		&i.Name,
		&i.IsAdmin,
		&i.IsActive,
		&i.LineUserID,
		&i.LineLinkedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, google_id, facebook_id, email, account, password_hash, name, is_admin, is_active, line_user_id, line_linked_at, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.FacebookID,
		&i.Email,
		&i.Account,
		&i.PasswordHash,
		&i.Name,
		&i.IsAdmin,
		&i.IsActive,
		&i.LineUserID,
		&i.LineLinkedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, google_id, facebook_id, email, account, password_hash, name, is_admin, is_active, line_user_id, line_linked_at, created_at FROM users ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.GoogleID,
			&i.FacebookID,
			&i.Email,
			&i.Account,
			&i.PasswordHash,
			&i.Name,
			&i.IsAdmin,
			&i.IsActive,
			&i.LineUserID,
			&i.LineLinkedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $2, name = $3, line_user_id = $4, line_linked_at = $5, is_admin=$6
WHERE id = $1
RETURNING id, google_id, facebook_id, email, account, password_hash, name, is_admin, is_active, line_user_id, line_linked_at, created_at
`

type UpdateUserParams struct {
	ID           pgtype.UUID        `json:"id"`
	Email        string             `json:"email"`
	Name         pgtype.Text        `json:"name"`
	LineUserID   pgtype.Text        `json:"line_user_id"`
	LineLinkedAt pgtype.Timestamptz `json:"line_linked_at"`
	IsAdmin      bool               `json:"is_admin"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.LineUserID,
		arg.LineLinkedAt,
		arg.IsAdmin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.FacebookID,
		&i.Email,
		&i.Account,
		&i.PasswordHash,
		&i.Name,
		&i.IsAdmin,
		&i.IsActive,
		&i.LineUserID,
		&i.LineLinkedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserAccountAndPassword = `-- name: UpdateUserAccountAndPassword :exec
UPDATE users
SET account = $2, password_hash = $3
WHERE email = $1
`

type UpdateUserAccountAndPasswordParams struct {
	Email        string      `json:"email"`
	Account      pgtype.Text `json:"account"`
	PasswordHash pgtype.Text `json:"password_hash"`
}

func (q *Queries) UpdateUserAccountAndPassword(ctx context.Context, arg UpdateUserAccountAndPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserAccountAndPassword, arg.Email, arg.Account, arg.PasswordHash)
	return err
}
